
package com.estuardoeg.CybersourceDeviceFingerprint;

import android.util.Log;

import com.facebook.react.ReactPackage;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.uimanager.ViewManager;
import com.threatmetrix.TrustDefender.Config;
import com.threatmetrix.TrustDefender.EndNotifier;
import com.threatmetrix.TrustDefender.ProfilingResult;
import com.threatmetrix.TrustDefender.THMStatusCode;
import com.threatmetrix.TrustDefender.TrustDefender;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class RNCybersourceDeviceFingerprintModule extends ReactContextBaseJavaModule {

  private final ReactApplicationContext reactContext;
  private static String ORG_ID = "1snn5n9w";
  private Config trustDefenderConfig;

  public RNCybersourceDeviceFingerprintModule(ReactApplicationContext reactContext) {
    super(reactContext);
       this.reactContext = reactContext;
      trustDefenderConfig = new Config().setOrgId(ORG_ID)
              .setContext(reactContext);
  }

  @Override
  public String getName() {
    return "RNCybersourceDeviceFingerprint";
  }

    @ReactMethod
    public void getSessionID(final Callback callback){
        THMStatusCode initStatus = TrustDefender.getInstance().init(trustDefenderConfig);
        if(initStatus == THMStatusCode.THM_OK || initStatus == THMStatusCode.THM_Already_Initialised) {
            Log.e("TrustDefender", "Successfully initialized: "+initStatus.getDesc());
            Log.e("TrustDefender", "Successfully initialized: "+initStatus.getDesc());
            Log.i("TrustDefender", "With version: " + TrustDefender.version);
            THMStatusCode status = TrustDefender.getInstance().doProfileRequest(new EndNotifier() {
                @Override
                public void complete(ProfilingResult profilingResult) {
                    callback.invoke(profilingResult.getSessionID());
                    Log.e("TrustDefender", profilingResult.getSessionID());
                }
            });

            if(status == THMStatusCode.THM_OK) {
                Log.e("TrustDefender NOT ", TrustDefender.getInstance().getResult().getSessionID());
                // The profiling successfully started, if a session id was generated by the SDK, it is now available
            } else {
                // Profiling errored out. Checking the status here will give you an idea of what happened
                if(status == THMStatusCode.THM_NotYet) {
                    //Another profiling is running.
                    Log.e("TrustDefender", "NOT YET");
                    //callback.invoke(false);
                }
            }

        } else {
            Log.e("TrustDefender", "Init was not successful " + initStatus.getDesc()+". Can't perform profiling.");
            callback.invoke(false);
        }
    }

    public static class SessionPackage implements ReactPackage{

        @Override
        public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {
            List<NativeModule> modules = new ArrayList<>();
            modules.add(new RNCybersourceDeviceFingerprintModule(reactContext));
            return modules;
        }

        @Override
        public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {
            return Collections.emptyList();
        }
    }

}
